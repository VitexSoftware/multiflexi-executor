#!groovy

// List of target distributions
String[] distributions = [
    'debian:bookworm',
    'debian:trixie',
    'debian:forky',
    'ubuntu:jammy',
    'ubuntu:noble'
]

String vendor = 'vitexsoftware'
String imagePrefix = 'multiflexi-'

properties([
    copyArtifactPermission('*')
])

node() {
    ansiColor('xterm') {
        stage('SCM Checkout') {
            checkout scm
        }
    }
}

def branches = [:]

distributions.each { distro ->
    branches[distro] = {
        def distroName = distro
        echo "=== Building for ${distroName} ==="

        def dist = distroName.split(':')
        def distroCode = dist[1]
        def buildImage = ''
        def artifacts = []
        def buildVer = ''

        node {
            ansiColor('xterm') {
                stage("Checkout ${distroName}") {
                    checkout scm
                    def imageName = "${vendor}/${imagePrefix}${distroCode}:latest"
                    buildImage = docker.image(imageName)
                    timeout(time: 10, unit: 'MINUTES') {
                        sh 'git checkout debian/changelog'
                    }
                    def version = timeout(time: 10, unit: 'MINUTES') {
                        sh(
                            script: 'dpkg-parsechangelog --show-field Version',
                            returnStdout: true
                        )
                    }.trim()
                    buildVer = "${version}.${env.BUILD_NUMBER}~${distroCode}"
                    echo "Build version: ${buildVer}"
                }

                stage("Build ${distroName}") {
                    buildImage.inside {
                        timeout(time: 10, unit: 'MINUTES') {
                            sh "dch -b -v ${buildVer} \"${env.BUILD_TAG}\""
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            sh 'apt-get update --allow-releaseinfo-change'
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            sh 'chown jenkins:jenkins ..'
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            sh 'debuild-pbuilder -i -us -uc -b'
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            sh '''
                                mkdir -p $WORKSPACE/dist/debian/
                                rm -rf $WORKSPACE/dist/debian/*
                                for deb in $(awk '{print $1}' debian/files); do
                                    mv "../$deb" $WORKSPACE/dist/debian/
                                done
                            '''
                        }
                        artifacts = timeout(time: 10, unit: 'MINUTES') {
                            sh(
                                script: '''
                                    awk '{print $1}' debian/files
                                ''',
                                returnStdout: true
                            )
                        }.trim().split('\n')
                    }
                }

                stage("Test ${distroName}") {
                    buildImage.inside {
                        def debconf_debug = 0
                        timeout(time: 10, unit: 'MINUTES') {
                            sh '''
                                cd $WORKSPACE/dist/debian/
                                dpkg-scanpackages . /dev/null > Packages
                                gzip -9c Packages > Packages.gz
                            '''
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            sh 'echo "deb [trusted=yes] file://///$WORKSPACE/dist/debian/ ./" | tee /etc/apt/sources.list.d/local.list'
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            sh 'apt-get update --allow-releaseinfo-change'
                        }
                        artifacts.each { deb_file ->
                            if (deb_file.endsWith('.deb')) {
                                def pkgName = deb_file.tokenize('/')[-1].replaceFirst(/_.*/, '')
                                timeout(time: 10, unit: 'MINUTES') {
                                    echo "Installing ${pkgName} on $(lsb_release -sc)"
                                }
                                timeout(time: 10, unit: 'MINUTES') {
                                    sh "DEBIAN_FRONTEND=noninteractive DEBCONF_DEBUG=${debconf_debug} apt-get -y install ${pkgName} || apt-get -y -f install"
                                }
                            }
                        }
                    }
                }

                stage("Archive artifacts ${distroName}") {
                    buildImage.inside {
                        timeout(time: 10, unit: 'MINUTES') {
                            archiveArtifacts artifacts: 'dist/debian/*.deb'
                        }
                        timeout(time: 10, unit: 'MINUTES') {
                            sh '''
                                set -e
                                if [ -f debian/files ]; then
                                  while read -r file _; do
                                    [ -n "$file" ] || continue
                                    rm -f "dist/debian/$file" || true
                                    rm -f "../$file" || true
                                    rm -f "$WORKSPACE/$file" || true
                                  done < debian/files
                                fi
                            '''
                        }
                    }
                    publishDebToAptly()
                }
            }
        }
    }
}

parallel branches
